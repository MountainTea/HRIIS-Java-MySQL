package dao.impl;

import dao.MemberDao;
import model.Member;
import util.DbConnection;
import java.sql.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class MemberDaoImpl implements MemberDao {

    private static Connection conn = DbConnection.getDb();


    @Override
    public void addMember(Member member) {
        // 取得並設定成員編號 (若需要自動產生)
        String memNo = getNextMemNo();

        String sql = "INSERT INTO member(mem_no, name, gender,email, phone, address, role, password, created_at, updated_at) "
                   + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, memNo);
            ps.setString(2, member.getName());

            Integer g = member.getGender();
            if (g == null) {
                ps.setNull(3, Types.INTEGER);
            } else {
                ps.setInt(3, g);
            }

            ps.setString(4, member.getEmail());
            ps.setString(5, member.getPhone());
            ps.setString(6, member.getAddress());
            ps.setString(7, member.getRole());
            ps.setString(8, member.getPassword());
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public Member getMemberByNo(String memNo) {
        String sql = "SELECT * FROM member WHERE mem_no = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, memNo);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return mapResultSetToMember(rs);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public Member getMemberById(int id) {
        String sql = "SELECT * FROM member WHERE id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return mapResultSetToMember(rs);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public List<Member> getAllMembers() {
        String sql = "SELECT * FROM member";
        List<Member> members = new ArrayList<>();
        try (PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                members.add(mapResultSetToMember(rs));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return members;
    }

    @Override
    public List<Member> selectById(int id) {
        String sql = "SELECT * FROM member WHERE id = ?";
        List<Member> list = new ArrayList<>();
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    list.add(mapResultSetToMember(rs));
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    @Override
    public List<Member> selectUsernameAndPassword(String email, String password) {
        String sql = "SELECT * FROM member WHERE email=? AND password=?";
        List<Member> l = new ArrayList<>();
        try (PreparedStatement preparedstatement = conn.prepareStatement(sql)) {
            preparedstatement.setString(1, email);
            preparedstatement.setString(2, password);
            try (ResultSet resultset = preparedstatement.executeQuery()) {
                if (resultset.next()) {
                    Member m = new Member();
                    m.setId(resultset.getInt("id"));
                    m.setMemNo(resultset.getString("mem_no"));
                    m.setName(resultset.getString("name"));
                    m.setEmail(resultset.getString("email"));
                    m.setPassword(resultset.getString("password"));
                    m.setAddress(resultset.getString("address"));
                    m.setPhone(resultset.getString("phone"));
                    m.setRole(resultset.getString("role"));
                    l.add(m);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return l;
    }

    @Override
    public List<Member> selectByUsername(String email) {
        String sql = "SELECT * FROM member WHERE email=?";
        List<Member> l = new ArrayList<>();
        try (PreparedStatement preparedstatement = conn.prepareStatement(sql)) {
            preparedstatement.setString(1, email);
            try (ResultSet resultset = preparedstatement.executeQuery()) {
                if (resultset.next()) {
                    Member m = new Member();
                    m.setId(resultset.getInt("id"));
                    m.setName(resultset.getString("name"));
                    m.setEmail(resultset.getString("email"));
                    m.setPassword(resultset.getString("password"));
                    l.add(m);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return l;
    }

    @Override
    public void updateMember(Member member) {
        String sql = "UPDATE member SET name=?, gender=?, email=?, phone=?, address=?, role=?, password=?, updated_at=NOW() "
                   + "WHERE id=?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, member.getName());

            Integer newGender = member.getGender();
            if (newGender == null) {
                Member oldData = getMemberById(member.getId());
                if (oldData != null && oldData.getGender() != null) {
                    ps.setInt(2, oldData.getGender());  
                } else {
                    ps.setNull(2, Types.INTEGER);
                }
            } else {
                ps.setInt(2, newGender);
            }

            ps.setString(3, member.getEmail());
            ps.setString(4, member.getPhone());
            ps.setString(5, member.getAddress());
            ps.setString(6, member.getRole());
            ps.setString(7, member.getPassword());
            ps.setInt(8, member.getId());

            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void deleteMember(int id) {
        String sql = "DELETE FROM member WHERE id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, id);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getNextMemNo() {
        String sql = "SELECT MAX(mem_no) FROM member";
        try (PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                String maxMemNo = rs.getString(1);
                if (maxMemNo != null) {
                    // 假設 mem_no 格式為 "mem001"
                    int nextNumber = Integer.parseInt(maxMemNo.substring(3)) + 1;
                    return "mem" + String.format("%03d", nextNumber);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return "mem001"; 
    }


    private Member mapResultSetToMember(ResultSet rs) throws SQLException {
        Member member = new Member();
        member.setId(rs.getInt("id"));
        member.setMemNo(rs.getString("mem_no"));
        member.setName(rs.getString("name"));
        member.setGender(rs.getInt("gender")); 
        member.setEmail(rs.getString("email"));
        member.setPhone(rs.getString("phone"));
        member.setAddress(rs.getString("address"));
        member.setRole(rs.getString("role"));
        member.setPassword(rs.getString("password"));
        member.setCreatedAt(rs.getTimestamp("created_at"));
        member.setUpdatedAt(rs.getTimestamp("updated_at"));
        return member;
    }
}
